name: packAndDockerImages
#触发机制，当main分支有创建tag时
on:
  create:
    branches:
      - main
    tags:
      - 'v*'
jobs:
  releaePackage:
    name: releaseOnGithub
    runs-on: ubuntu-latest
    steps:
      - name: SetOutput #处理Tag字符串并存进outputs
        id: vars
        run: |
          echo ::set-output name=tag::${GITHUB_REF#refs/*/}
      - name: SetUpGo  
        uses: actions/setup-go@v2
        with:
          go-version: '1.16'
      - name: Checkout  #Checkout代码
        uses: actions/checkout@v3
      - name: GoTidy 
        run: go mod tidy
      - name: Pack  #运行打包脚本
        run: |
          ./build/cmd/package.sh ${{ steps.vars.outputs.tag }}
      - name: Create Release   #在github上创建对应标签的release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
      - name: Create release on GitHub   #创建各种系统架构下的源码包并上传至release
        uses: goreleaser/goreleaser-action@v2
        with:
          version: latest
          args: release --rm-dist
          workdir: ./app/apinto
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
      - name: UploadAsset    #将打包脚本生成的tar包上传至release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./out/apinto-${{ steps.vars.outputs.tag }}.linux.x64.tar.gz
          asset_name: apinto-${{ steps.vars.outputs.tag }}.linux.x64.tar.gz
          asset_content_type: application/application/x-gzip-compressed
  dockerImage:
    name: buildDockerImage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3    
      - name: SetupGo
        uses: actions/setup-go@v2
        with:
          go-version: '1.16'
      - name: SetOutput
        id: vars
        run: echo ::set-output name=tag::${GITHUB_REF#refs/*/}
      - name: GoTidy
        run: go mod tidy
      - name: Pack  #运行打包脚本并且将生成的tar包复制至Dockerfile所在目录
        run: |
          ./build/cmd/package.sh ${{ steps.vars.outputs.tag }}
          cp ./out/apinto-${{ steps.vars.outputs.tag }}.linux.x64.tar.gz ./build/resources/apinto.linux.x64.tar.gz
      - name: Login Docker   #登录docker
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
      - name: buildImage 
        run: |
          docker build -t apinto-gateway:${{ steps.vars.outputs.tag }} -f ./build/resources/Dockerfile ./build/resources
      - name: pushImage  
        run: |
          docker tag apinto-gateway:${{ steps.vars.outputs.tag }} chenjiekun/apinto-gateway:latest
          docker push chenjiekun/apinto-gateway:latest
